defClean <- defense
data <- defClean
head(data, 2)
data <- data %>% select(Name, Opponent_Opponent, Tackles_Solo) %>% spread(Opponent, Tackles_Solo)
data <- data %>% select(Name, Opponent_Opponent, Tackles_Solo) %>% spread(Opponent_Opponent, Tackles_Solo)
head(data, 2)
data <- data %>% select(Name, Opponent_Opponent, Tackles_Solo) %>% spread(Opponent_Opponent, Tackles_Solo, fill=0)
rm(data)
defense <- defense %>% mutate_at(c('Tackles_Solo','Tackles_ASST','Tackles_TFL','Tackles_Sack','Turnover_FF','Turnover_FR','Turnover_INT','Pass_QBH','Pass_PB'), as.numeric)
defClean <- defense
data <- defClean
data <- data %>% select(Name, Opponent_Opponent, Tackles_Solo) %>% spread(Opponent_Opponent, Tackles_Solo, fill=0)
head(data, 2)
p <- ggplot(data, aes(x='West Virginia', y='Kansas State', shape=Name)) + geom_point()
p
p <- ggplot(data, aes(x='West Virginia', y='Kansas State', color=Name)) + geom_point()
p.
p
head(data, 5)
data <- data %>% select(Name, 'West Virginia', 'Kansas State')
head(data, 5)
data$'West Virginia' <- as.integer(data$'West Virginia')
data$'Kansas State' <- as.integer(data$'Kansas State')
head(data, 5)
p <- ggplot(data, aes(x='West Virginia', y='Kansas State')) + geom_point()
p
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2])
# Check variable types. Pick five variables that need to be converted to a different type and fix those
# Extract year, month, and day from the variable Date
head(data, 10)
data$`Zip Code` <- as.integer(data$`Zip Code`)
head(data, 10)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
head(data, 5)
head(data$`Item Number`, 3)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
head(data, 5)
data$Date <- as.Date(data$Date)
head(data$Date)
data$Date <- str_split_fixed(data$Date, "/", 3)
head(data, 5)
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
# Extract year, month, and day from the variable Date
data$Date <- str_split_fixed(data$Date, "/", 3)
head(data, 3)
p <- ggplot(data, aes(x=Latitude, y=Longitude, color=City)) + geom_point()
p
p <- ggplot(data, aes(x=Latitude, y=Longitude)) + geom_point()
p
head(data$Category, 3)
head(data$`Category Name`, 3)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`)) + geom_bar(stat='identity')
p
data$`Category Name` <- as.factor(data$`Category Name`)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`)) + geom_bar(stat='identity')
p
head(data$`Category Name`, 20)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`)) + geom_bar(stat='identity') + theme(axis.text.x=element_text(angle=90))
p
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`)) + geom_jitter(position=position_jitter(0.2), cex=1.2)
p
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`)) + geom_jitter(position=position_jitter(0.2), cex=1.2)
p <- p + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
p
data$`Category Name` <- toupper(data$`Category Name`)
data <- data[!duplicated(data)]
data <- unique(data)
data <- data %>% distinct()
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`)) + geom_jitter(position=position_jitter(0.2), cex=1.2)
p <- p + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
p
head(data, 5)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`)) + geom_jitter()
p <- p + theme(axis.text.x = element_text(size=5, angle=90, hjust=0.5))
p
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
# Extract year, month, and day from the variable Date
data$Date <- str_split_fixed(data$Date, "/", 3)
p <- ggplot(data, aes(x=Latitude, y=Longitude)) + geom_point() + ggtitle("Ames Liquor Stores Latitudes and Longitudes")
p # Show plot
# Need to clean a bit
data$`Category Name` <- toupper(data$`Category Name`)
data <- data %>% distinct()
# p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`)) + geom_bar(stat='identity', width=1)
# p <- p + theme(axis.text.x = element_text(size=5, angle=90, hjust=1, vjust = 0.2)) + xlab('Category') + ylab('Volume Sold (Gallons)')
# p <- p + ggtitle('Gallons Sold by Category') + theme(legend.position = 'none')
# p
head(data, 3)
2018 <- filter(data, Date[,3] == "2018")
2018 <- data[data$Date[,3] == '2018']
data$Date[,1] <- as.integer(data$Date[,3])
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
# Extract year, month, and day from the variable Date
data$Date <- str_split_fixed(data$Date, "/", 3)
head(data, 3)
data$Date[,1] <- as.integer(data$Date[,1])
data$Date[,2] <- as.integer(data$Date[,2])
data$Date[,3] <- as.integer(data$Date[,3])
head(data, 3)
data$Date <- as.integer(data$Date)
data$Date[,3] <- as.numeric(data$Date[,3])
head(data, 3)
data$Date[,3]
data$Date[,3] <- as.numeric(data$Date[,3])
head(data, 3)
2018 <- filter(data, data$Date[,3] == "2018")
mp
temp <- filter(data, data$Date[,3] == "2018")
head(temp)
2018 <- temp
2018_data <- filter(data, data$Date[,3] == "2018")
data2018 <- filter(data, data$Date[,3] == "2018")
2018sales <- sum(data2018$`Bottles Sold`)
sales <- sum(data2018$`Bottles Sold`)
sales
volume <- sum(data2018$`Volume Sold (Liters)`)
volume
amtSpent <- sum(data2018$`Sale (Dollars)`)
amtSpent
p <- ggplot(data2018, aes(x=Date[,2], y=`Volume Sold (Liters)`)) + geom_bar(stat="identity") + facet_wrap(data2018$Date[,1])
p
data2018 <- unique(data2018)
data2018 <- data2018[!duplicated(data2018),]
unique(data2018)
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
# Extract year, month, and day from the variable Date
data$Date <- str_split_fixed(data$Date, "/", 3)
p <- ggplot(data, aes(x=Latitude, y=Longitude)) + geom_point() + ggtitle("Ames Liquor Stores Latitudes and Longitudes")
p # Show plot
# Need to clean a bit
data$`Category Name` <- toupper(data$`Category Name`)
data <- data %>% distinct()
# p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`)) + geom_bar(stat='identity', width=1)
# p <- p + theme(axis.text.x = element_text(size=5, angle=90, hjust=1, vjust = 0.2)) + xlab('Category') + ylab('Volume Sold (Gallons)')
# p <- p + ggtitle('Gallons Sold by Category') + theme(legend.position = 'none')
# p
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
data$Date <- as.factor(data$Date)
# Extract year, month, and day from the variable Date
data$Date <- str_split_fixed(data$Date, "/", 3)
p <- ggplot(data, aes(x=Latitude, y=Longitude)) + geom_point() + ggtitle("Ames Liquor Stores Latitudes and Longitudes")
p # Show plot
# Need to clean a bit
data$`Category Name` <- toupper(data$`Category Name`)
data <- data %>% distinct()
# p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`)) + geom_bar(stat='identity', width=1)
# p <- p + theme(axis.text.x = element_text(size=5, angle=90, hjust=1, vjust = 0.2)) + xlab('Category') + ylab('Volume Sold (Gallons)')
# p <- p + ggtitle('Gallons Sold by Category') + theme(legend.position = 'none')
# p
head(data, 3)
head(data, 3)
data$Date <- factor(data$Date)
data$Date[,1] <- factor(data$Date[,1])
head(data, 3)
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
# Extract year, month, and day from the variable Date
p <- ggplot(data, aes(x=Latitude, y=Longitude)) + geom_point() + ggtitle("Ames Liquor Stores Latitudes and Longitudes")
p # Show plot
# Need to clean a bit
data$`Category Name` <- toupper(data$`Category Name`)
data <- data %>% distinct()
# p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`)) + geom_bar(stat='identity', width=1)
# p <- p + theme(axis.text.x = element_text(size=5, angle=90, hjust=1, vjust = 0.2)) + xlab('Category') + ylab('Volume Sold (Gallons)')
# p <- p + ggtitle('Gallons Sold by Category') + theme(legend.position = 'none')
# p
data$Date[,1] <- as.integer(data$Date[,1])
data$Date
data$Date <- as.Date.numeric(data$Date)
data$Date <- as.Date.numeric(data$Date, origin="1/1/2018")
data$Date <- as.Date(data$Date, "%m/%d/%Y")
head(data, 3)
temp <- data
year <- as.numeric(format(temp$Date, format="%Y"))
year
month <- as.numeric(format(data$Date, format="%m"))
day <- as.numeric(format(data$Date, format="%d"))
data <- add_column(data, Day = day)
data <- add_column(data, Month = month)
data <- add_column(data, Year = year)
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
# Extract year, month, and day from the variable Date
data$Date <- as.Date(data$Date, "%m/%d/%Y")
year <- as.numeric(format(data$Date, format="%Y"))
month <- as.numeric(format(data$Date, format="%m"))
day <- as.numeric(format(data$Date, format="%d"))
data <- add_column(data, Day = day)
data <- add_column(data, Month = month)
data <- add_column(data, Year = year)
data2018 <- filter(data, data$Year == "2018") # only 2018 data
sales <- sum(data2018$`Bottles Sold`) # total bottles sold in 2018
sales
volume <- sum(data2018$`Volume Sold (Liters)`) # total volume sold in 2018
volume
amtSpent <- sum(data2018$`Sale (Dollars)`)
amtSpent
# Plot volume sold by day, facet by month
head(data, 5)
head(data$Month, 5)
# Read data, import tidyverse
library('tidyverse')
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# Extract geographic latitude and longitute from the variable Store Location
data$`Store Location` <- str_split_fixed(data$`Store Location`, "\n", 3) # split by '\n'
data <- add_column(data, LatLong = data$`Store Location`[,3])
data$LatLong <- str_remove_all(data$LatLong, "[()]")
data$LatLong <- str_split_fixed(data$LatLong, ", ", 2)
data <- add_column(data, Latitude = data$LatLong[,1])
data <- add_column(data, Longitude = data$LatLong[,2]) # Latitude and longitude columns will make graphing easier
# Check variable types. Pick five variables that need to be converted to a different type and fix those
data$`Zip Code` <- as.integer(data$`Zip Code`)
data$Latitude <- as.double(data$Latitude)
data$Longitude <- as.double(data$Longitude)
data$`Item Number` <- as.integer(data$`Item Number`)
data$`Invoice/Item Number` <- as.factor(data$`Invoice/Item Number`)
# Extract year, month, and day from the variable Date
data$Date <- as.Date(data$Date, "%m/%d/%Y")
year <- as.numeric(format(data$Date, format="%Y"))
month <- as.numeric(format(data$Date, format="%m"))
day <- as.numeric(format(data$Date, format="%d"))
data <- add_column(data, Day = day)
data <- add_column(data, Month = month)
data <- add_column(data, Year = year)
p <- ggplot(data, aes(x=Latitude, y=Longitude)) + geom_point() + ggtitle("Ames Liquor Stores Latitudes and Longitudes")
p # Show plot
# Need to clean a bit
data$`Category Name` <- toupper(data$`Category Name`)
data <- data %>% distinct()
# p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`)) + geom_bar(stat='identity', width=1)
# p <- p + theme(axis.text.x = element_text(size=5, angle=90, hjust=1, vjust = 0.2)) + xlab('Category') + ylab('Volume Sold (Gallons)')
# p <- p + ggtitle('Gallons Sold by Category') + theme(legend.position = 'none')
# p
devtools::install_github("guiastrennec/ggplus")
devtools::install_github("guiastrennec/ggplus")
library('ggplus')
head(data, 3)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Liters)`)) + geom_boxplot()
facet_multiple(plot=p, facets = `Category Name`, ncol=4, nrow=4)
facet_multiple(plot=p, facets = data$`Category Name`, ncol=4, nrow=4)
facet_multiple(plot=p, facets = data$`Category Name`, ncol=4, nrow=2)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Liters)`)) + geom_boxplot() + facet_multiple(p, facets='Category Name', 4, 2)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Liters)`)) + geom_boxplot() + facet_multiple(p, facets=`Category Name`, 4, 2)
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Liters)`)) + geom_boxplot() + facet_multiple(p, facets=data$`Category Name`, 4, 2)
myplots3 <- data %>% split(ceiling(group_indices(.,`Category Name`)/124)) %>% map(~ggplot(.,aes(x=`Category Name`, y=`Volume Sold (Liters)`))) + geom_boxplot() + facet_wrap(~`Category Name`)
myplots3
myplots3[[124]]
myplots3[[3]]
p <- ggplot(data, aes(x=`Category Name`, y=`Volume Sold (Gallons)`, color=`Category Name`, width=0.85)) + geom_bar(stat='identity', width=1)
p <- p + theme(axis.text.x = element_text(size=5, angle=90, hjust=1, vjust = 0.2)) + xlab('Category') + ylab('Volume Sold (Gallons)')
p <- p + ggtitle('Gallons Sold by Category') + theme(legend.position = 'none')
p
p <- p + scale_x_discrete()
head(data, 3)
2018data <- filter(data, Year == 2018)
data2018 <- filter(data, Year == 2018)
head(data)
head(data2018)
str(data2018)
dim(data2018)
p <- ggplot(data2018, aes(x=Day, y=`Volume Sold (Liters)`)) + geom_point()
p
p <- p + facet_wrap(data2018$Month)
p
p <- ggplot(data2018, aes(x=Day, y=`Volume Sold (Liters)`, fill=Day)) + geom_point() + facet_wrap(data2018$Month)
p
p <- ggplot(data2018, aes(x=Day, y=`Volume Sold (Liters)`, color=Day)) + geom_point() + facet_wrap(data2018$Month)
p
filter(data2018, Month == 9)
filter(data, Month == 9)
filter(data, Month == 9 && Year == 2018)
library("tidyverse")
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
names(acc)
person <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/person.csv", stringsAsFactors=FALSE)
# Are there some days of the week where more accidents happen than on others?
p <- ggplot(acc, aes(x=DAY_WEEK)) + geom_histogram(color="black", fill="blue", binwidth = 0.5)
p <- p + xlab("Day of Week (1=Sunday, 7=Saturday)") + ylab("Number of Accidents") + ggtitle("Number of Accidents by Day of Week")
p
# What time of the day do accidents happen?
p <- ggplot(acc, aes(x=HOUR)) + geom_histogram(color="red", fill="white", binwidth=2)
p <- p + xlab("Hour") + ylab("Number of Accidents") + ggtitle("Number of Accidents by Hour")
p
# What is the number of accidents with at least one drunk driver?
dim(acc)
wDrunk <- filter(acc, DRUNK_DR > 0)
dim(wDrunk)
# Load the person table. Identify drivers (PER_TYPE == 1) and subset on them
driver <- filter(person, PER_TYP == 1)
# Join accident and driver table (work out which variable(s) to use)
# The ST_CASE variable is a unique number for each accident, will be sufficient to inner join tables
accDriver <- merge(driver, acc, by="ST_CASE")
# Tally number of accidents by day of the week, hour of the day, and gender. Visualize the results!
byDay <- ggplot(accDriver, aes(x=DAY_WEEK)) + geom_histogram(color="green", fill="grey26", binwidth=1)
byDay <- byDay + xlab("Day of Week") + ylab("Number of Accidents") + ggtitle("Number of Accidents by Day of Week")
byDay <- byDay + scale_x_continuous(breaks = seq(1, 7, 1))
byDay
byHour <- ggplot(accDriver, aes(x=HOUR.x)) + geom_histogram(color="red", fill="grey26", binwidth=1)
byHour <- byHour + xlab("Hour") + ylab("Number of Accidents") + ggtitle("Number of Accidents by Hour")
byHour
byGend <- ggplot(accDriver, aes(x=SEX)) + geom_histogram(color="blue", fill="grey26", binwidth=1)
byGend <- byGend + xlab("Gender (1=Male, 2=Female)") + ylab("Number of Accidents") + ggtitle("Number of Accidents by Gender")
byGend <- byGend + scale_x_continuous(breaks = seq(0, 10, by=1))
byGend
setwd('C:/bgannon/Spring2019/DS202/Lab5')
install.packages('readxl')
install.packages("readxl")
library("readxl")
install.packages("readxl")
install.packages("readxl")
library('readxl')
byGend
GLC <- read_excel("GLC.xlsx")
getwd()
GLC <- read_excel('GLC.xlsx')
GLC <- read_excel('GLC.xlsx')
head(GLC, 5)
head(acc, 3)
accGLC <- merge(acc, GLC, by=c("State Code", "County Code"))
accGLC <- merge(acc, GLC, by.x =c("State Code", "County Code"))
accGLC <- acc %>% right_join(GLC, by=c("State Code", "County Code"))
library(dplyr)
library('dplyr')
accGLC <- acc %>% right_join(GLC, by=c("State Code", "County Code"))
head(acc, 3)
head(GLC, 3)
map_date
map_data
glc.us<-readxl::read_xlsx("FRPP GLC United States.xlsx")
glc.terr<-readxl::read_xlsx("FRPP GLC US Territories.xlsx")
#rearrange data
colnames(glc.us)<-glc.us[1,]
glc.us<-glc.us[-1,]
colnames(glc.terr)<-glc.terr[1,]
glc.terr<-glc.terr[-1,]
# codes and names of counties
county<-data.frame(code=as.numeric(glc.us$`County Code`), name=glc.us$`County Name`)
head(county)
unique(county[county$name=="BOONE",])
head(glc.us, 3)
head, glc.terr, 3
head(glc.terr, 3)
